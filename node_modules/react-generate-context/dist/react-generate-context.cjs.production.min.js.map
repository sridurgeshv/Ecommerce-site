{"version":3,"file":"react-generate-context.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import * as React from 'react'\n\ntype Children = { children: React.ReactNode }\n\ntype UseGetContextValue<Props, Context> = (props: Props) => Context\n\ntype Options<Context> = {\n  defaultContext?: Context\n  requireProvider?: boolean\n  missingProviderMessage?: string\n}\n\ntype Provider<Props> = (props: Props & Children) => JSX.Element\n\ntype Hook<Context> = () => Context | undefined\n\nconst defaultMissingProviderMessage =\n  'The hook for this context cannot be used outside of its Provider'\n\n/**\n * A function for generating a Provider and Hook for a React Context\n *\n * @arg useGetContextValue - A custom hook function used to get the `value` prop passed to the generated Provider\n * @arg options - Additional options for generating the Context\n */\nexport default function generateContext<Props, Context>(\n  useGetContextValue: UseGetContextValue<Props, Context>,\n  options: Options<Context> = {}\n): [Provider<Props>, Hook<Context>] {\n  const {\n    defaultContext,\n    requireProvider = true,\n    missingProviderMessage = defaultMissingProviderMessage,\n  } = options\n\n  /**\n   * Creates a Context in closure\n   */\n  const Ctx = React.createContext(defaultContext)\n\n  /**\n   * The Provider with which to use this Context\n   */\n  const Provider = (props: Props & Children) => {\n    const value = useGetContextValue(props)\n\n    return <Ctx.Provider value={value}>{props.children}</Ctx.Provider>\n  }\n\n  /**\n   * The hook for consuming the generated Context\n   */\n  const useThisContext = () => {\n    const context = React.useContext(Ctx)\n\n    if (requireProvider && context === undefined) {\n      throw new Error(missingProviderMessage)\n    }\n\n    return context\n  }\n\n  return [Provider, useThisContext]\n}\n"],"names":["useGetContextValue","options","requireProvider","missingProviderMessage","Ctx","React","defaultContext","props","value","Provider","children","context","undefined","Error"],"mappings":"oHA0BEA,EACAC,YAAAA,IAAAA,EAA4B,UAMxBA,EAFFC,gBAAAA,kBAEED,EADFE,uBAAAA,aAfF,qEAqBMC,EAAMC,gBALRJ,EAHFK,sBAgCK,CAnBU,SAACC,OACVC,EAAQR,EAAmBO,UAE1BF,gBAACD,EAAIK,UAASD,MAAOA,GAAQD,EAAMG,WAMrB,eACfC,EAAUN,aAAiBD,MAE7BF,QAA+BU,IAAZD,QACf,IAAIE,MAAMV,UAGXQ"}
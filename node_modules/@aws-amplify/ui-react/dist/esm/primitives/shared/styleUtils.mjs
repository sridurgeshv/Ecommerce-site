import{__rest as o}from"tslib";import*as e from"react";import{isDesignToken as t}from"@aws-amplify/ui";import{ComponentPropsToStylePropsMap as r}from"../types/style.mjs";import{getValueAtCurrentBreakpoint as s}from"./responsive/utils.mjs";import{useBreakpoint as n}from"./responsive/useBreakpoint.mjs";import"../../components/ThemeProvider/AmplifyContext.mjs";import{useTheme as p}from"../../hooks/useTheme.mjs";import{getStyleValue as a}from"./getStyleValue.mjs";import{isNullOrEmptyString as i,isEmptyString as m,getCSSVariableIfValueIsThemeKey as l}from"./utils.mjs";const u=o=>"auto"===o||"number"==typeof o&&!isNaN(o)||"string"==typeof o&&!isNaN(parseFloat(o)),c=o=>"auto"===o?"auto":`span ${o}`,f=o=>u(o)?c(o):Array.isArray(o)?o.map((o=>c(o))):"object"==typeof o&&null!=o?Object.entries(o).reduce(((o,[e,t])=>Object.assign(Object.assign({},o),{[e]:c(t)})),{}):null,b=t=>{const{rowSpan:r,columnSpan:s,row:n,column:p}=t,a=o(t,["rowSpan","columnSpan","row","column"]),{rowFromSpanValue:m,columnFromSpanValue:l}=e.useMemo((()=>({rowFromSpanValue:f(r),columnFromSpanValue:f(s)})),[r,s]);return Object.assign({row:i(n)?m:n,column:i(p)?l:p},a)},y=({props:o={},style:e={},breakpoint:n,breakpoints:p,tokens:i})=>{const u={};return Object.keys(o).filter((e=>null!==o[e])).forEach((c=>{if(c in r){const u=o[c];if(!u||m(u))return;const f=r[c];let b="";t(u)?b=u.toString():"string"==typeof u?b=l(c,u,i):"number"==typeof u?b=u:"object"==typeof u&&(b=a({propKey:c,tokens:i,value:s({values:u,breakpoint:n,breakpoints:p})})),e=Object.assign(Object.assign({},e),{[f]:b})}else void 0!==o[c]&&(u[c]=o[c])})),{propStyles:e,nonStyleProps:u}},k=(o,t)=>{const{breakpoints:{values:r,defaultBreakpoint:s},tokens:a}=p(),i=n({breakpoints:r,defaultBreakpoint:s}),m=b(o);return e.useMemo((()=>y({props:m,style:t,breakpoint:i,breakpoints:r,tokens:a})),[m,t,r,i,a])};export{f as convertGridSpan,y as convertStylePropsToStyleObj,c as getGridSpan,u as isSpanPrimitiveValue,k as useStyles,b as useTransformStyleProps};
